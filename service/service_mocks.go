// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClassifier is a mock of Classifier interface
type MockClassifier struct {
	ctrl     *gomock.Controller
	recorder *MockClassifierMockRecorder
}

// MockClassifierMockRecorder is the mock recorder for MockClassifier
type MockClassifierMockRecorder struct {
	mock *MockClassifier
}

// NewMockClassifier creates a new mock instance
func NewMockClassifier(ctrl *gomock.Controller) *MockClassifier {
	mock := &MockClassifier{ctrl: ctrl}
	mock.recorder = &MockClassifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClassifier) EXPECT() *MockClassifierMockRecorder {
	return m.recorder
}

// Classify mocks base method
func (m *MockClassifier) Classify(input string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Classify", input)
	ret0, _ := ret[0].(string)
	return ret0
}

// Classify indicates an expected call of Classify
func (mr *MockClassifierMockRecorder) Classify(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Classify", reflect.TypeOf((*MockClassifier)(nil).Classify), input)
}

// MockReponder is a mock of Reponder interface
type MockReponder struct {
	ctrl     *gomock.Controller
	recorder *MockReponderMockRecorder
}

// MockReponderMockRecorder is the mock recorder for MockReponder
type MockReponderMockRecorder struct {
	mock *MockReponder
}

// NewMockReponder creates a new mock instance
func NewMockReponder(ctrl *gomock.Controller) *MockReponder {
	mock := &MockReponder{ctrl: ctrl}
	mock.recorder = &MockReponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReponder) EXPECT() *MockReponderMockRecorder {
	return m.recorder
}

// Respond mocks base method
func (m *MockReponder) Respond(input, classification string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Respond", input, classification)
	ret0, _ := ret[0].(string)
	return ret0
}

// Respond indicates an expected call of Respond
func (mr *MockReponderMockRecorder) Respond(input, classification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockReponder)(nil).Respond), input, classification)
}
